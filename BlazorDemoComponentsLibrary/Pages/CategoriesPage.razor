@page "/categories"
@using BlazorDemo.Data.Interfaces
@using BlazorServerDemo2024.Core.DTO
@using Microsoft.EntityFrameworkCore
@inject IGenericData<Category, CategoriaDTO, CreaCategoriaDTO, int> categoriesData
@inject IJSRuntime jsRuntime

<h3>Categories Page</h3>

@if(categorie == null)
{
    <p><em>Caricamento Dati...</em></p>
}
else
{
    @if(categoriaDTO is null)
    {
        <button class="btn btn-info" @onclick="() => AggiungiCategoria()">Aggiungi Categoria</button>
        <ListaCategorie Categorie="categorie"
            OnEliminaCategoria="Elimina" OnModificaCategoria="Modifica"></ListaCategorie>

        <MyModal Id="modal1" Title="Rimuovi Categoria"
                 OnSalva="RimuoviCategoria" OnAnnulla="AnnullaCategoria">
            <ChildContent>
                <h3>Sei sicuro di voler rimuovere la categoria
                    @categoriaDTOTemp.Nome
                </h3>
            </ChildContent>
        </MyModal>
    
    } else
    {
        <Dettaglio TItem="CategoriaDTO" Item="categoriaDTO"
                   OnSalva="Salva" OnAnnulla="Annulla">
            <FormFields>
                <MyInputText Label="Nome" Id="nome" @bind-Value="context.Nome"></MyInputText>
                <MyInputText Label="Descrizione" Id="descrizione" @bind-Value="context.Descrizione"></MyInputText>
             
            </FormFields>
        </Dettaglio>
    }
}



@code {
    List<CategoriaDTO>? categorie = new List<CategoriaDTO>();
    CategoriaDTO? categoriaDTO;
    CategoriaDTO categoriaDTOTemp = new CategoriaDTO();

    private async Task RimuoviCategoria(){
        await categoriesData.EliminaItem(categoriaDTOTemp.Id);
        categorie = (await categoriesData.EstraiItemsAsync())?.ToList();
        await jsRuntime.InvokeVoidAsync("nascondiModale");
    }

    private async Task AnnullaCategoria()
    {
        await jsRuntime.InvokeVoidAsync("nascondiModale");
    }

    private async Task Salva(CategoriaDTO categoria)
    {
        if(categoria.Id == 0)
        {

            await categoriesData.AggiungiItem(new CreaCategoriaDTO
            {
                 Descrizione = categoria.Descrizione,
                 Nome = categoria.Nome
            });
        } else
        {
            await categoriesData.ModificaItem(categoria);
        }

        categoriaDTO = null;
        categorie = (await categoriesData.EstraiItemsAsync())?.ToList();

    }

    private void Modifica(CategoriaDTO categoriaDTOModificata)
    {
        categoriaDTO = categoriaDTOModificata;

        // await categoriesData.ModificaCategoria(categoriaDTO);
        // categorie = (await categoriesData.EstraiCategorieAsync())?.ToList();
    }

    private async Task Elimina(CategoriaDTO categoriaDTO)
    {
        categoriaDTOTemp = categoriaDTO;
        await jsRuntime.InvokeVoidAsync("mostraModale", "modal1");
        // await categoriesData.EliminaItem(categoriaDTO.Id);
        // categorie = (await categoriesData.EstraiItemsAsync())?.ToList();
    }


    private void Annulla()
    {
        categoriaDTO = null;    

    }

    // List<Category>? categories = new List<Category>();
    protected override async Task OnInitializedAsync()
    {

        categorie = (await categoriesData.EstraiItemsAsync())?.ToList();
        // var data = categoriesData.EstraiCategorie();
        // if(data is not null)
        // {
        //     categorie = await (data.Where(c => c.Nome.Length > 5)).ToListAsync();
        // }


        // categories = (await categoriesData.GetCategoriesAsync()).ToList();
        // categories =  await categoriesData.GetCategories().Where(c => c.CategoryName.Length > 5).ToListAsync();
    }

    public void AggiungiCategoria()
    {
        categoriaDTO = new CategoriaDTO();

         // var categoria = new CreaCategoriaDTO()
         // {
         //     Nome = "Categoria 1",
         //     Descrizione = "Descrizione Categoria 1"
         // };
         // await categoriesData.AggiungiCategoria(categoria);
    }

}
